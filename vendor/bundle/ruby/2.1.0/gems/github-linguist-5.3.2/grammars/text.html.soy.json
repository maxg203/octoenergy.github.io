{
  "fileTypes": [
    "soy"
  ],
  "injections": {
    "meta.tag": {
      "patterns": [
        {
          "include": "#body"
        }
      ]
    }
  },
  "name": "Closure Templates",
  "patterns": [
    {
      "include": "#alias"
    },
    {
      "include": "#delpackage"
    },
    {
      "include": "#namespace"
    },
    {
      "include": "#template"
    },
    {
      "include": "#comment"
    }
  ],
  "repository": {
    "alias": {
      "match": "{(alias)\\s+([\\w\\.]+)(?:\\s+(as)\\s+(\\w+))?}",
      "captures": {
        "1": {
          "name": "storage.type.soy"
        },
        "2": {
          "name": "entity.name.type.soy"
        },
        "3": {
          "name": "storage.type.soy"
        },
        "4": {
          "name": "entity.name.type.soy"
        }
      }
    },
    "attribute": {
      "match": "(\\w+)=(\"(?:\\\\?.)*?\")",
      "captures": {
        "1": {
          "name": "storage.other.attribute.soy"
        },
        "2": {
          "name": "string.double.quoted.soy"
        }
      }
    },
    "variant": {
      "begin": "(variant)=(\")",
      "beginCaptures": {
        "1": {
          "name": "storage.other.attribute.soy"
        },
        "2": {
          "name": "string.double.quoted.soy"
        }
      },
      "contentName": "string.double.quoted.soy",
      "end": "(\")",
      "endCaptures": {
        "1": {
          "name": "string.double.quoted.soy"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "boolean": {
      "match": "true|false",
      "name": "language.constant.boolean.soy"
    },
    "body": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#let"
        },
        {
          "include": "#call"
        },
        {
          "include": "#css"
        },
        {
          "include": "#xid"
        },
        {
          "include": "#condition"
        },
        {
          "include": "#condition-control"
        },
        {
          "include": "#for"
        },
        {
          "include": "#literal"
        },
        {
          "include": "#msg"
        },
        {
          "include": "#special-character"
        },
        {
          "include": "#print"
        },
        {
          "include": "text.html.basic"
        }
      ]
    },
    "call": {
      "patterns": [
        {
          "begin": "{((?:del)?call)\\s+([\\w\\.]+)(?=[^/]*?})",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.soy"
            },
            "2": {
              "name": "entity.name.function.soy"
            }
          },
          "end": "{/(\\1)}",
          "endCaptures": {
            "1": {
              "name": "storage.type.function.soy"
            }
          },
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#variant"
            },
            {
              "include": "#attribute"
            },
            {
              "include": "#param"
            }
          ]
        },
        {
          "begin": "{((?:del)?call)(\\s+[\\w\\.]+)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.soy"
            },
            "2": {
              "name": "entity.name.function.soy"
            }
          },
          "end": "/}",
          "patterns": [
            {
              "include": "#variant"
            },
            {
              "include": "#attribute"
            }
          ]
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "begin": "/\\*",
          "end": "\\*/",
          "name": "comment.block.documentation.soy",
          "patterns": [
            {
              "match": "(@param\\??)\\s+(\\S+)",
              "captures": {
                "1": {
                  "name": "keyword.parameter.soy"
                },
                "2": {
                  "name": "variable.parameter.soy"
                }
              }
            }
          ]
        },
        {
          "match": "^\\s*(\\/\\/.*)$",
          "name": "comment.line.double-slash.soy"
        }
      ]
    },
    "css": {
      "begin": "{(css)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.soy"
        }
      },
      "end": "}",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "delpackage": {
      "match": "{(delpackage)\\s+([\\w\\.]+)}",
      "captures": {
        "1": {
          "name": "storage.type.soy"
        },
        "2": {
          "name": "entity.name.type.soy"
        }
      }
    },
    "expression": {
      "patterns": [
        {
          "include": "#boolean"
        },
        {
          "include": "#number"
        },
        {
          "include": "#function"
        },
        {
          "include": "#null"
        },
        {
          "include": "#string"
        },
        {
          "include": "#variable-ref"
        },
        {
          "include": "#operator"
        }
      ]
    },
    "for": {
      "begin": "{/?(foreach|for)(?=\\s|})",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.soy"
        }
      },
      "end": "}",
      "patterns": [
        {
          "match": "in",
          "name": "keyword.control.soy"
        },
        {
          "include": "#expression"
        },
        {
          "include": "#body"
        }
      ]
    },
    "function": {
      "begin": "(\\w+)\\(",
      "beginCaptures": {
        "1": {
          "name": "support.function.soy"
        }
      },
      "end": "\\)",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "condition": {
      "begin": "{/?(if|elseif|switch|case)\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.soy"
        }
      },
      "end": "}",
      "patterns": [
        {
          "include": "#attribute"
        },
        {
          "include": "#expression"
        }
      ]
    },
    "condition-control": {
      "match": "{(else|ifempty|default)}",
      "captures": {
        "1": {
          "name": "keyword.control.soy"
        }
      }
    },
    "literal": {
      "begin": "{(literal)}",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.soy"
        }
      },
      "end": "{/(\\1)}",
      "endCaptures": {
        "1": {
          "name": "keyword.other.soy"
        }
      },
      "name": "meta.literal"
    },
    "namespace": {
      "match": "{(namespace)\\s+([\\w\\.]+)}",
      "captures": {
        "1": {
          "name": "storage.type.soy"
        },
        "2": {
          "name": "entity.name.type.soy"
        }
      }
    },
    "number": {
      "match": "-?\\.?\\d+|\\d[\\.\\d]*",
      "name": "language.constant.numeric"
    },
    "null": {
      "match": "null",
      "name": "language.constant.null.soy"
    },
    "param": {
      "patterns": [
        {
          "begin": "{(param)\\s+(\\w+\\s*\\:)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.soy"
            },
            "2": {
              "name": "variable.parameter.soy"
            }
          },
          "end": "/}",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "{(param)\\s+(\\w+)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.soy"
            },
            "2": {
              "name": "variable.parameter.soy"
            }
          },
          "end": "{/(\\1)}",
          "endCaptures": {
            "1": {
              "name": "storage.type.soy"
            }
          },
          "patterns": [
            {
              "include": "#attribute"
            },
            {
              "include": "#body"
            }
          ]
        }
      ]
    },
    "string": {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single.soy",
      "patterns": [
        {
          "match": "\\\\(?:[\\\\'\"nrtbf]|u[0-9a-fA-F]{4})",
          "name": "constant.character.escape.soy"
        }
      ]
    },
    "template": {
      "begin": "{(template|deltemplate)\\s([\\w\\.]+)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.soy"
        },
        "2": {
          "name": "entity.name.function.soy"
        }
      },
      "end": "{(/\\1)}",
      "endCaptures": {
        "1": {
          "name": "storage.type.soy"
        }
      },
      "patterns": [
        {
          "begin": "{(@param)(\\??)\\s+(\\S+\\s*:)",
          "beginCaptures": {
            "1": {
              "name": "keyword.parameter.soy"
            },
            "2": {
              "name": "storage.modifier.keyword.operator.soy"
            },
            "3": {
              "name": "variable.parameter.soy"
            }
          },
          "end": "}",
          "name": "meta.parameter.soy",
          "patterns": [
            {
              "include": "#type"
            }
          ]
        },
        {
          "include": "#variant"
        },
        {
          "include": "#body"
        },
        {
          "include": "#attribute"
        }
      ]
    },
    "let": {
      "patterns": [
        {
          "begin": "{(let)\\s+(\\$\\w+\\s*:)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.soy"
            },
            "2": {
              "name": "variable.soy"
            }
          },
          "end": "/}",
          "patterns": [
            {
              "include": "#comment"
            },
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "{(let)\\s+(\\$\\w+)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.soy"
            },
            "2": {
              "name": "variable.soy"
            }
          },
          "end": "{/(\\1)}",
          "endCaptures": {
            "1": {
              "name": "storage.type.soy"
            }
          },
          "patterns": [
            {
              "include": "#attribute"
            },
            {
              "include": "#body"
            }
          ]
        }
      ]
    },
    "msg": {
      "match": "{/?(msg|fallbackmsg)",
      "captures": {
        "1": {
          "name": "keyword.other.soy"
        }
      },
      "end": "}",
      "patterns": [
        {
          "include": "#attribute"
        }
      ]
    },
    "operator": {
      "match": "-|not|\\*|\\/|%|\\+|<=|>=|<|>|==|!=|and|or|\\?:|\\?|:",
      "name": "keyword.operator.soy"
    },
    "print": {
      "begin": "{(print)?\\s*",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.soy"
        }
      },
      "end": "}",
      "patterns": [
        {
          "match": "\\|\\s*(changeNewlineToBr|truncate|bidiSpanWrap|bidiUnicodeWrap)",
          "captures": {
            "1": {
              "name": "support.function.soy"
            }
          }
        },
        {
          "include": "#expression"
        }
      ]
    },
    "special-character": {
      "match": "{(sp|nil|\\\\r|\\\\n|\\\\t|lb|rb)}",
      "captures": {
        "1": {
          "name": "language.support.constant"
        }
      }
    },
    "type": {
      "patterns": [
        {
          "match": "any|null|\\?|string|bool|int|float|number|html|uri|js|css|attributes",
          "name": "support.type.soy"
        },
        {
          "begin": "(list|map)(<)",
          "beginCaptures": {
            "1": {
              "name": "support.type.soy"
            },
            "2": {
              "name": "support.type.punctuation.soy"
            }
          },
          "end": "(>)",
          "endCaptures": {
            "1": {
              "name": "support.type.modifier.soy"
            }
          },
          "patterns": [
            {
              "include": "#type"
            }
          ]
        }
      ]
    },
    "xid": {
      "begin": "{(xid)\\s+",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.soy"
        }
      },
      "end": "}",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "variable-ref": {
      "match": "\\$[\\a-zA-Z_][\\w\\.]*",
      "name": "variable.other.soy"
    }
  },
  "scopeName": "text.html.soy"
}